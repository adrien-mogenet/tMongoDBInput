<%@ jet
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.process.IConnection
	org.talend.core.model.metadata.IMetadataColumn
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaTypesManager
	org.talend.core.model.metadata.types.JavaType
    org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.metadata.MappingTypeRetriever
    org.talend.core.model.metadata.MetadataTalendType
	java.util.List
	java.util.ArrayList
	java.util.Map
	java.util.HashMap
	java.util.LinkedList
"
%>
<%
  CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
  INode node = (INode)codeGenArgument.getArgument();
  String cid = node.getUniqueName();


  /*
   * Retrieve internal schema : build columnList
   */
  List<IMetadataColumn> columnList = null;
  List<IMetadataTable> metadatas = node.getMetadataList();
  if(metadatas != null && metadatas.size() > 0)
  {
      IMetadataTable metadata = metadatas.get(0);
      if(metadata != null)
      {
          columnList = metadata.getListColumns();
      }
  }


  /*
   * Retrieve input and output Talend connections
   */
  List<? extends IConnection> inputs = node.getIncomingConnections();
  List<? extends IConnection> outputs = node.getOutgoingSortedConnections();
  String incomingConnName = null;
  String outgoingConnName = null;

  if (inputs.size() > 0)
  {
      IConnection in = inputs.get(0);
      incomingConnName = in.getName();
  }

  if (outputs.size() > 0)
  {
      IConnection out = outputs.get(0);
      outgoingConnName = out.getName();
  }


  /*
   * For each iteration into the component, we iterate over
   * each column
   */
  %>
  com.mongodb.DBObject o_<%=cid%> = cursor_<%=cid%>.next();
  <%
  for (IMetadataColumn colStmt : columnList)
  {
      String cType = colStmt.getTalendType();
      if (outgoingConnName != null)
      {
          %>
          <%
          if (cType.equals("id_String"))
          {
				%>
				if (o_<%=cid%>.get("<%=colStmt%>") instanceof String || o_<%=cid%>.get("<%=colStmt%>") == null) {
					// MongoDB supports the type String, ...
					<%=outgoingConnName%>.<%=colStmt%> = (String) o_<%=cid%>.get("<%=colStmt%>");
				} else {
					// ... best-effort-conversion for other types 
					<%=outgoingConnName%>.<%=colStmt%> = o_<%=cid%>.get("<%=colStmt%>").toString();
				}
				<%
          }
          else if (cType.equals("id_Long"))
          {
				%>
				if (o_<%=cid%>.get("<%=colStmt%>") instanceof Long || o_<%=cid%>.get("<%=colStmt%>") == null) {
					// MongoDB supports the type Long, ...
					<%=outgoingConnName%>.<%=colStmt%> = (Long) o_<%=cid%>.get("<%=colStmt%>");
				} else if (o_<%=cid%>.get("<%=colStmt%>") instanceof Double) {
					// ... but many clients save Longs as Doubles, ...
					<%=outgoingConnName%>.<%=colStmt%> = (o_<%=cid%>.get("<%=colStmt%>") == null) ? null : Math.round((Double) o_<%=cid%>.get("<%=colStmt%>"));
				} else {
					// ... best-effort-conversion for other types 
					<%=outgoingConnName%>.<%=colStmt%> = new Long(o_<%=cid%>.get("<%=colStmt%>").toString());
				}
				<%
          }
          else if (cType.equals("id_Integer"))
          {
				%>
				if (o_<%=cid%>.get("<%=colStmt%>") instanceof Integer || o_<%=cid%>.get("<%=colStmt%>") == null) {
					// MongoDB supports the type Integer, ...
					<%=outgoingConnName%>.<%=colStmt%> = (Integer) o_<%=cid%>.get("<%=colStmt%>");
				} else if (o_<%=cid%>.get("<%=colStmt%>") instanceof Double) {
					// ... but many clients save Integers as Doubles, ...
					<%=outgoingConnName%>.<%=colStmt%> = (o_<%=cid%>.get("<%=colStmt%>") == null) ? null : (int) Math.round((Double) o_<%=cid%>.get("<%=colStmt%>"));
				} else {
					// ... best-effort-conversion for other types 
					<%=outgoingConnName%>.<%=colStmt%> = new Integer(o_<%=cid%>.get("<%=colStmt%>").toString());
				}
				<%
          }
          else if (cType.equals("id_Double"))
          {
				%>
				if (o_<%=cid%>.get("<%=colStmt%>") instanceof Double || o_<%=cid%>.get("<%=colStmt%>") == null) {
					<%=outgoingConnName%>.<%=colStmt%> = (Double) o_<%=cid%>.get("<%=colStmt%>");
				} else {
					// ... best-effort-conversion for other types 
					<%=outgoingConnName%>.<%=colStmt%> = new Double(o_<%=cid%>.get("<%=colStmt%>").toString());
				}
				<%
          }
          else if (cType.equals("id_Float"))
          {
				%>
				if (o_<%=cid%>.get("<%=colStmt%>") == null) {
					<%=outgoingConnName%>.<%=colStmt%> = null;
				} else {
					// ... best-effort-conversion for other types 
					<%=outgoingConnName%>.<%=colStmt%> = new Float(o_<%=cid%>.get("<%=colStmt%>").toString());
				}
				<%
          }
          else if (cType.equals("id_Boolean"))
          {
				%>
				if (o_<%=cid%>.get("<%=colStmt%>") instanceof Boolean || o_<%=cid%>.get("<%=colStmt%>") == null) {
					<%=outgoingConnName%>.<%=colStmt%> = (Boolean) o_<%=cid%>.get("<%=colStmt%>");
				} else {
					// ... best-effort-conversion for other types 
					<%=outgoingConnName%>.<%=colStmt%> = new Boolean(o_<%=cid%>.get("<%=colStmt%>").toString());
				}
				<%
          }
          else if (cType.equals("id_Date"))
          {
				%>
				<%=outgoingConnName%>.<%=colStmt%> = (Date) o_<%=cid%>.get("<%=colStmt%>");
				<%
          }
          else if (cType.equals("id_Object"))
          {
				%>
				<%=outgoingConnName%>.<%=colStmt%> = o_<%=cid%>.get("<%=colStmt%>");
				<%
          }
          else if (cType.equals("id_List"))
          {
				%>
				<%=outgoingConnName%>.<%=colStmt%> = (List) o_<%=cid%>.get("<%=colStmt%>");
				<%
          }
      }
  }
%>
++nb_line_<%=cid %>;